# 副作用とは
副作用（Side Effects）は、Reactコンポーネントがその内部状態や描画とは独立して外部世界と相互作用する操作を指します。
外部APIからのデータフェッチ、直接のDOMの操作など、コンポーネントのレンダリングロジックに直接組み込むべきではない操作を包括します。
Reactの宣言的なパラダイムでは、レンダリングロジックは純粋であるべきで、予期せぬ副作用を引き起こしてはなりません。
この制約により、アプリケーションの予測可能性が保たれ、バグの発生が抑制されます。

## 副作用の主な種類と例
### 外部APIからのデータフェッチ
ウェブアプリケーションにおいて一般的な副作用の一つは、外部APIからデータを取得することです。
データフェッチは、ユーザーのインタラクションやコンポーネントのマウント時など、特定のタイミングで行われるべき操作です。

### 直接のDOM操作
Reactは通常、DOMを抽象化し、仮想DOMを介してUIを管理します。
しかし、特定のライブラリや外部のコードとの連携、またはパフォーマンスの最適化を目的として、直接DOMにアクセスする必要がある場合があります。これも副作用の一種です。

### イベントリスナーの設定と解除
アプリケーションにイベントリスナーを設定することも、外部世界との相互作用を伴うため、副作用に分類されます。
適切に管理しないと、メモリリークや予期せぬ挙動の原因となるため、副作用を適切に処理することが重要です。

## 副作用が許される場所
### イベントハンドラ
イベントハンドラは、ユーザーアクション（例えばクリックやフォームの送信）に応答して実行される関数です。
副作用を発生させる最も直接的でコントロールしやすい方法の一つです。
イベントハンドラを通じて副作用を処理することは、特定のユーザーインタラクションに紐付けられていることを明確にするため、推奨されます。

### useEffect
useEffectフックは、コンポーネントのレンダリングが完了した後に副作用を実行します。
これは、外部のデータソースとの同期、イベントリスナーの設定と解除、手動でのDOM操作など、レンダリングロジックとは独立した操作を実行するために設計されています。
useEffectは、コンポーネントがマウントされた後や、指定された依存配列内の値が変更された後に副作用をトリガーします。
これにより、副作用の実行タイミングを細かく制御し、不必要な副作用の実行を避けることが可能になります。