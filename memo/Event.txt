## イベントプロパゲーション
### キャプチャーフェーズ
イベントが発生すると、例えばボタンクリックの場合、新しいイベントオブジェクトが生成され、ドキュメントのルートからターゲットエレメントに向かって伝播します。
ターゲットエレメントとは、イベントが最初にトリガーされたエレメント。今回でいうとボタンです。
このプロセスは「キャプチャーフェーズ」と呼ばれ、イベントが発生元に到達するまでDOMツリーを下降していきます。

### バブリングフェーズ
ターゲットに到達後、イベントオブジェクトは「バブリングフェーズ」を経てDOMツリーを上昇し、ルートに戻ります。

### 重要なポイント
1. キャプチャとバブリングの段階で、イベントは子エレメントと親エレメントを1つ1つ確認すること。
2. デフォルトでは、イベントハンドラはターゲットエレメント上のイベントだけでなく、バブリングフェーズ中もイベントをリッスンする。

上記の2つを組み合わせると、親エレメントのすべてのイベントハンドラも、同じタイプのイベントをリッスンしている限り、バブリングフェーズ中も実行される。


## イベントデリゲーション
イベントデリゲーションは、各子要素にハンドラを登録する代わりに、共通の親要素に対してハンドラを一括して登録する仕組みです。
個々のエレメントにイベントハンドラを登録する必要がなくなるため、メモリ使用量が減り、パフォーマンスが向上します。

### 具体的な処理の流れ
1. 子エレメントでイベントが発生する。
2. イベントオブジェクトがDOMツリーを伝播していく。
3. 親エレメントがイベントを受け取り、イベントハンドラが実行される。
4. イベントハンドラ内で、イベントが発生した子エレメントを特定する。
5. 子エレメントに対して処理を行う。

### 具体例
```
<div id="container">
  <button class="btn">ボタン1</button>
  <button class="btn">ボタン2</button>
  <button class="btn">ボタン3</button>
</div>
```
```
const container = document.querySelector('#container');

container.addEventListener('click', (event) => {
  // イベントが発生した子エレメントを取得
  const target = event.target;

  // 子エレメントがボタンかどうか確認
  if (target.classList.contains('btn')) {
    // 親要素の背景色を変える
    target.parentNode.style.backgroundColor = 'red';
  }
});
```


## Reactにおけるバブリング
Reactでは、イベントの処理方法がブラウザのネイティブ実装とは異なります。
イベントハンドラはDOMツリーのルートではなく、Reactが管理するルートコンテナ(#root)に登録されます。

```
<button 
  className="btn"
  onClick={() => setLoading(true)}
/>
```
Reactでは、上記は以下に変換される。
```
document
  .querySelector('#root') // .btnではない
  .addEventListener(
    'click', 
    () => setLoading(true)
  );
```

つまり、イベントハンドラはルートコンテナに集約されるということです。
これにより、Reactアプリケーションでは、イベントの委譲が自然に行われ、イベントハンドラの複数のコピーを各ボタンに配置する必要がなくなり、パフォーマンスとメモリ使用の最適化が図られます。

処理の流れ
1. ボタンをクリック
2. イベントオブジェクト発生
3. ターゲット要素に到達するまでDOMツリーを下る
4. ルートコンテナまでイベントがDOMツリーを登る
5. イベントとターゲット要素に一致するハンドラに従ってイベントが処理される


### Reactにおけるイベントオブジェクト
Reactは「合成イベント」と呼ばれる、DOMのネイティブイベントオブジェクトをラップしたオブジェクトを提供します。
これにより、ブラウザ間の不整合を解消し、イベント処理の一貫性を保証します。
合成イベントは、stopPropagationやpreventDefaultといったメソッドを含み、ブラウザのデフォルト動作の制御も可能です。

### ReactとバニラJavaScriptのイベント処理の違い
Reactでは、イベントハンドラをキャメルケースで命名し(onClickなど)、イベント処理のために特定のプロップを使用します。
また、ブラウザのデフォルト動作を防ぐためには、preventDefaultメソッドの呼び出しが必須であり、イベントオブジェクトのreturnValueプロパティにfalseを設定する方法は使用できません。
バブリングフェーズではなくキャプチャフェーズでイベントを処理する必要がある場合は、イベントハンドラ名にCaptureを付けます。