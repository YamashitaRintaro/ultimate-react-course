# なぜフロントエンドフレームワークが存在するのか
JSにフレームワークが存在する理由は、以下の3つです。

- vanila.jsだとUIとデータを同期させ続けることが難しいから
- 正しいコードの構造化と記述方法を強制してくれるから
- 開発者やチームにWebアプリケーションを構築する一貫した方法を提供するから

一つずつ、解説していきます。

## vanila.jsだとUIとデータを同期させ続けることが難しいから
フロントエンドアプリケーション構築とは、データを処理し、UIで表示することです。
データを受信し、ユーザーアプリを使用する度にデータを変更し、常にデータを画面に表示します。
vanila.jsでは現代の超複雑なUIと膨大な量のデータを同期させ続けることが難しいのです。理由は以下の2つです。

// TODO: コードの具体例を載せる
1. 大量のDOMを直接トラバースして操作する必要があるから
   vanila.jsでは、要素の選択、クラスの切り替え、DOMのトラバース、テキストやCSSの操作まで手作業を行う必要があります。
   現代の複雑なアプリでは、悪夢のような事態に陥るでしょう。
2. 単純なテキストや数字などの状態が、しばしばDOMにそのまま格納されるから
   単純なテキストや数字などの状態が、アプリケーションの中心的な位置ではなく、HTML要素そのものにあるのです。
   その結果、アプリの多くの部分がDOMの状態に直接アクセスすることになり、コードが複雑になり、アプリケーションに多くのバグをもたらします。

## 正しいコードの構造化と記述方法を強制してくれるから
フレームワークの作者たちは、アプリケーションを構造化する優れた方法を考えだして規約にしています。
開発者はフレームワーク作者の規約に従うことで、スパゲッティコードを減らし、品質の良いアプリケーションを作成できます。

## 開発者やチームにWebアプリケーションを構築する一貫した方法を提供するから
チーム全体が同じスタイルでコーディングすることになり、一貫性のあるコードと製品を作ることができます。

# まとめ
ReactやVueといったフレームワーク（正確にはライブラリ）は、UIとデータの同期という大変な作業を、開発者の代わりにやってくれます。
その結果、我々開発者はUIとデータの構成だけに集中できます。