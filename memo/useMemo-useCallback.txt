# useMemoとuseCallbackのの違い
## useMemo
useMemoは、計算コストが高い関数の戻り値をメモ化（キャッシュ）するために使用されます。
依存配列内の値が変更されない限り、関数の戻り値が再計算されることはありません。
親コンポーネントが再レンダリングされても、自らに渡されているpropsの値が変化していないなら再レンダリングしないコンポーネントを作成することができます。
```
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
```

## useCallback
useCallbackは、useMemoの特殊なケース。
これは関数自体をメモ化するために使用され、特に関数をpropsとして子コンポーネントに渡す際に有効です。
依存配列内の値が変更されない限り、関数インスタンスが再作成されることはありません。
```
const memoizedCallback = useCallback(
  () => {
    doSomething(a, b);
  },
  [a, b],
);
```

## メモ化の注意点
useCallbackのような関数を使用するにもコストがかかります。
Reactが関数を実行し、メモリに保存する必要があるのです。
よって、パフォーマンスが悪いコンポーネントのみに使用するべきです。