
## useRefフックとは
useRefは、Reactのフックの一つで、レンダリング間で値を保持するために使用されます。
このフックによって生成されるオブジェクトは、ミュータブルなcurrentプロパティを持ち、このプロパティに保存された値はコンポーネントのライフサイクルを通じて保持されます。
useRefの主な使用目的は二つあります。一つ目は、レンダリングを跨いでデータを保持すること。二つ目は、DOM要素への直接的な参照を保持することです。

## useRefの目的
### 値の保持
useRefを使用することで、コンポーネントが再レンダリングされたとしても、その間に保存されたデータを保持することができます。
タイマーのIDや、前回のレンダリング時の値など、UIの再レンダリングを必要としない値を保存するのに役立ちます。
```
const timerId = useRef(null);

// タイマーのIDを保存
timerId.current = setTimeout(() => {
  // 何かしらの処理
}, 1000);
```

### DOM要素の参照
useRefは、DOM要素への参照を保持するためにも使用されます。
Reactのデータフロー外で直接DOM要素にアクセスしたり操作したりすることが可能になります。
フォーカスの管理、アニメーションの実行、サードパーティのDOMライブラリとの連携などに有用です。
```
const inputEl = useRef(null);

const focusInput = () => {
  // 直接DOMにアクセスしてフォーカスを当てる
  inputEl.current.focus();
};

return (
  <div>
    <input ref={inputEl} type="text" />
    <button onClick={focusInput}>フォーカスを当てる</button>
  </div>
);
```

## useRefとuseStateの違い
useRefと状態管理フックuseStateは似ているように見えますが、いくつかの重要な違いがあります。

- 再レンダリング: useStateを使用して状態を更新すると、その更新がコンポーネントの再レンダリングを引き起こします。しかし、useRefでcurrentプロパティを更新しても、再レンダリングは発生しません。
- データのミュータビリティ: useRefによって生成されるrefオブジェクトのcurrentプロパティはミュータブルです。一方、useStateによって管理される状態は不変であり、更新するたびに新しい状態が生成されます。
- 更新の同期性: useStateの状態更新は非同期に行われるのに対し、useRefでのcurrentプロパティの更新は同期的です。そのため、useRefを使用すると、更新直後に変更した値を即座に参照することができます。