# React hooksとは
React hooksは、Reactのフレームワーク内で特別な役割を果たす関数群です。
これらは、Reactの内部メカニズムに"フック"し、ステートの作成やアクセス、副作用の登録といった操作を可能にします。
本質的に、フックはReactの内部構造、特にファイバーツリーへのアクセスを提供するAPIと言えます。
ファイバーツリーはReactのコアアーキテクチャの一部であり、直接的なアクセスは通常不可能です。
しかし、useStateやuseEffectなどのhooksを利用することで、この内部構造に干渉することができます。

## hooksの命名規則
hooksは、冒頭がuseという単語で始まる命名規則に従っています。Reactと開発者がhooksを他の関数と区別しやすくするための規約です。
実際、useで始まるカスタムフックを作成することで、UIに直接関係ないロジックを簡単に再利用できます。


## hooksの2つのルール
### トップレベルでしか呼び出せない
理由は、hooksが機能するのは常に同じ順序で呼び出される場合のみだからです。
トップレベルで呼び出さなければ同じ順序が保証されません。

```
const [A, setA] = useState(23)

// ルール違反！条件付きでhooksを使用している！
if(A===23)
  const [B, setB] = useState('')

useEffect(function Z(), [])
```
上記のようなコードを書いた場合、Fiberのhooksリストには、以下のような連結リストができます。
「State A」→ 「State B」→ 「Effect Z」 

State Aの値を23以外にした場合、State Bが呼ばれません。
つまり、State Aはもはや存在しないhooksにリンクしており、Effect Zへのリンクを持つhooksが消えることになります。
そのため、hooksが一つリストから消えると、リストの順番が完全に崩れてしまいます。
結果として、Reactは使用されたすべてのhooksを正しく追跡できなくなります。


## Reactの関数からしか呼び出せない
hooksはファンクションコンポーネントやカスタムフックからのみ呼び出せます。
通常の関数やクラスコンポーネントからは呼び出せません。
理由は、reactのESLintルールによって自動的に適応されるからです。