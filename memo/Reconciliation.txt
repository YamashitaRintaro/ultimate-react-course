# リコンシリエーション(Reconciliation)とは
リコンシリエーションは、Reactがコンポーネントの状態が更新された際に新しい仮想DOMと現在の仮想DOMを比較し、変更が必要な最小限の部分を特定してDOMを更新するプロセスです。
アプリのどこかで状態が変化するたびに､ 単純にDOM全体を更新するのは効率が悪いですよね。
アプリのどこかでステートが変更された場合､DOMのごく一部だけを更新し、すでに存在しているDOMの残りは再利用するためにリコンシリエーションが必要なのです。


## Fiberリコンサイラ
リコンシリエーションはリコンサイラによって処理されます。
Reactの現在のリコンサイラのことをFiberリコンサイラと呼びます。
リコンサイラには、以下のような役割があります。
- 最初のレンダリング時に仮想DOMを取得し､ それに基づいてファイバーツリーを構築。
- 現在のファイバー・ツリーと、新しい仮想DOMに基づいて更新されたファイバー・ツリーの間で、何を変更する必要があるかを正確に分析｡

### ファイバー・ツリーとは
・特別な内部ツリーであり、アプリ内の各コンポーネント・インスタンスとDOM要素に対して、ファイバーが1つ存在する｡
・仮想DOMのReact要素とは異なり､ ファイバーはレンダリングごとに再作成されない。
・変更可能データ構造であり、最初のレンダリングで作成されると今後の照合ステップで何度も更新される。
・非同期で実行できる：
  リコンサイラが行っているレンダリングプロセスをチャンクに分割し､
  いくつかのタスクを他のタスクより優先させ､ 作業を一時停止したり､ 再利用したり､ もう有効でなければ捨てたりすることができる｡

## Fiberのアルゴリズム
### コンポーネントのタイプの比較
Reactでは、異なるタイプのコンポーネント間での比較が行われると、古いツリーは無効とみなされ、新しいツリーが根本から構築されます。
たとえば、<div>を<span>に置き換えた場合、Reactは古いツリーを完全に破棄し、新しいツリーを構築します。
```
<div>
  <Counter />
</div>

<span>
  <Counter />
</span>
```

### リストの差分比較とキーの使用
リストや配列のコンポーネントを扱う際、Reactは各要素に割り当てられたkeyプロパティを用いて差分を計算します。
キーは各要素がユニークであることを保証し、Reconciliationプロセス中に要素が追加、削除、再配置される際の比較を効率化します。
適切に設定されたキーは、リストの更新が既存の要素を再利用することによってより効率的に行われることを可能にします。
キーが「安定しており、予測可能で、一意」であることは、リスト内の要素の更新を最適化する上で重要です。
```
<ul>
  {items.map((item, index) => (
    <li key={item.id}>{item}</li>
  ))}
</ul>
```

### Reconciliationのプロセス
1. とあるStateが更新
2. 再レンダーし、仮想DOMが作成される
3. ファイバーは現在のファイバー・ツリーと、新しい仮想DOMに基づいて更新されたファイバー・ツリーの間で､ 何を変更する必要があるかを正確に分析する｡
4. DOMの差分をすべて、コミット・フェーズで実際にDOMを変異させるために使われるエフェクト・リストと呼ばれるリストに入れる｡