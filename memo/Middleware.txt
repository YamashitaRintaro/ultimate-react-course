## ミドルウェアとは？
ミドルウェアとは、アプリケーションのリクエストとレスポンスの間に位置するプログラムのことです。
具体的には、次のような役割を果たします。

- 受信したリクエストに基づいてコードを実行
- レスポンスを返す前に追加の処理を行う

Next.jsでは、ミドルウェアは各ルートに対して共通の処理を一括で実行できる便利なツールです。

## Next.jsにおけるミドルウェアの機能
Next.jsのミドルウェアは、次のような特徴を持っています。

1. **ルートの前に実行**：デフォルトでは、すべてのルートの前にミドルウェアが実行されます。
2. **マッチャーの使用**：特定のルートに対してのみミドルウェアを実行するように指定することができます。
3. **共通ロジックの集中管理**：すべてのルートの前に共通のロジックを実行することで、コードの重複を避け、コンポーネントをクリーンに保つことができます。

## ミドルウェアの実装方法
### ミドルウェアの基本的な作成
Next.jsのプロジェクトでミドルウェアを作成するには、プロジェクトのルートフォルダに`middleware.js`または`middleware.ts`ファイルを配置します。
このファイルには、以下のような基本的なミドルウェア関数を定義します。

```javascript
// middleware.js
import { NextResponse } from 'next/server';

export function middleware(request) {
  return NextResponse.next();
}
```

### 特定のルートでミドルウェアを実行
ミドルウェアが特定のルートでのみ実行されるようにするには、matcherを使用します。
```javascript
// middleware.js
import { NextResponse } from 'next/server';

export function middleware(request) {
  return NextResponse.next();
}
export const config = {
  matcher: ['/specific-path/:path*'],
};
```

## ミドルウェアのユースケース
Next.jsのミドルウェアは、さまざまなユースケースで活用できます。以下にいくつかの例を挙げます。

- 認証と認可：ユーザーのクッキーやトークンをチェックし、アクセス制御を行います。
- リダイレクト：ジオロケーションに基づいてユーザーを特定のページにリダイレクトします。
- A/Bテスト：異なるバージョンのページをユーザーにランダムに表示し、パフォーマンスを比較します。
- カスタムヘッダーの設定：特定のヘッダーを追加または変更します。
