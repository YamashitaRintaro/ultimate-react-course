## ハイドレーションとは

### サーバーサイド・レンダリングから始まるプロセス
Reactアプリをサーバーサイドでレンダリングすると、最初のHTMLマークアップが生成され、クライアントに送信されます。
このHTMLは、ユーザーのブラウザでウェブページとしてレンダリングされます。
この時点で、ユーザーはページのコンテンツを閲覧できますが、インタラクティブな操作はまだできません。
ここで重要になるのが「ハイドレーション」というプロセスです。

### ハイドレーションの重要性
ハイドレーションとは、サーバーサイドでレンダリングされた静的なHTMLにReactのインタラクティブ性とイベントハンドラを追加するプロセスのことです。
このプロセスにより、最初のReactアプリが持っていたインタラクティブ性が再びウェブページに付与されます。

### 具体的なプロセス
1. HTMLの受け取り: クライアントはサーバーから送信されたHTMLページを受け取ります。
2. Reactバンドルのダウンロード: このHTMLに対応するReactバンドルもクライアントにダウンロードされます。
3. ハイドレーションの実行: Reactはクライアント上でコンポーネント・ツリーを再構築し、現在のDOMと比較します。一致すれば、既存のDOMをそのまま採用し、イベントハンドラをアタッチしてインタラクティブ性を復元します。

## ハイドレーションの利点と課題

### 利点
- 迅速な初期表示: サーバーサイドでレンダリングされたHTMLにより、初期表示が速くなります。
- SEOフレンドリー: 事前に生成されたコンテンツは、検索エンジンに容易にインデックスされます。
- インタラクティブ性の復元: ハイドレーションにより、Reactアプリのインタラクティブな機能が復元されます。

### 課題
- ハイドレーションエラー: サーバーサイドでレンダリングされたDOMとクライアントサイドのReactが生成するDOMが一致しない場合、ハイドレーションエラーが発生します。これにより、ユーザーエクスペリエンスが低下する可能性があります。
- パフォーマンスの問題: ハイドレーションには時間がかかる場合があり、大規模なアプリケーションではパフォーマンスに影響を与えることがあります。

## ハイドレーションエラーの原因
- HTML要素の間違った入れ子: 段落内での差分の使用など、サーバーとクライアントで異なるHTML構造。
- 異なるデータのレンダリング: サーバーとクライアントで異なるデータが使用されている場合。
- ブラウザ固有のAPIの使用: ウィンドウやローカルストレージなど、ブラウザにのみ存在するAPIや変数の使用。
- 副作用の誤った使用: 副作用が適切に処理されていない場合。