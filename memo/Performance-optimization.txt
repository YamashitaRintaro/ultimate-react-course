# パフォーマンス最適化
Reactアプリのパフォーマンス最適化は、

1. 無駄なレンダリングの防止
2. アプリ全体のスピードと応答性の向上
3. バンドルサイズの削減

3つの主要な分野に分けられます。

## 無駄なレンダリングの防止
無駄なレンダリングは、Reactアプリケーションのパフォーマンスを低下させる一般的な原因です。
Reactはコンポーネントベースのライブラリであるため、コンポーネントが不必要に再レンダリングされることが頻繁にあります。
この問題を解決するために以下のような方法があります。

- React.memo：
  propsが変更された場合にのみコンポーネントを再レンダリングさせます。
- useMemoとuseCallbackフック：
  計算コストの高い関数やコンポーネント間で共有される関数・オブジェクトをメモ化し、再計算を防ぎます。
- コロケーション：
  関連するコンポーネントとデータを物理的に近い場所に配置することです。
  データを必要とするコンポーネントの近くでデータをフェッチし、状態管理することで、不必要なpropsの伝播を避け、コンポーネントの再レンダリングを減らすことができます。
- コンポジション：
  小さなコンポーネントを組み合わせて新しいコンポーネントを作成するデザインパターンです。
  このアプローチにより、再利用可能でメンテナンスしやすいコードベースを構築できます。
  また、コンポジションを利用することで、各コンポーネントの責務を明確にし、不必要なレンダリングを減らすことができます。

## バンドルサイズの削減
バンドルサイズを削減することは、アプリケーションのロード時間を短縮し、パフォーマンスを向上させる効果的な方法です。
以下のテクニックが有効です。

- 不要なライブラリと依存関係の削除: 
  アプリケーションから不要なコードを取り除くことで、バンドルサイズを削減します。
- Tree Shaking: 
  使用されていないモジュールをバンドルから削除するためのプロセスです。
- コード分割と遅延ロード: 
  バンドルで1つの巨大なJSファイルを持つ代わりに、複数の小さなファイルを持ち、アプリで必要になったタイミングでダウンロードすることで、初期のバンドルサイズを小さく保ちます。
  コードを逐次ロードするプロセスを遅延ロードと言います。ReactのReact.lazyとSuspenseを使って、アプリケーションの異なる部分を必要に応じて遅延ロードします。
  初期ロード時のバンドルサイズを削減し、スピードを向上させることができます。