# useStateフックの概要と応用
useStateフックはReactの関数コンポーネントにおいて、状態管理の基石です。
このフックを使うことで、関数コンポーネント内で状態を持つことが可能になり、動的なアプリケーションの構築が容易になります。
本記事では、useStateフックの基本的な使い方から、より高度な使い方に至るまでを網羅的に説明します。


## ステートの作成と基本的な更新
### 初期化
useStateフックを使ってステートを作成する基本的な方法は、単一の値を初期状態として設定することです。
```
const [value, setValue] = useState(initialValue);
```

### 更新
ステートの更新は、useStateによって返されるセッター関数を使って行います。
このとき、新しいステートの値を直接セッター関数に渡すことができます。
```
setValue(newValue);
```


## コールバック関数を使用した高度な初期化と更新
### 初期化 
初期状態が何らかの計算に依存する場合、例えばローカルストレージからデータを読み込む場合、useStateにコールバック関数を渡すことができます。
```
const [state, setState] = useState(() => {
  const initialState = computeInitialState();
  return initialState;
});
```
このコールバック関数はコンポーネントの最初のレンダリング時にのみ実行されます。

### 更新 
状態の更新が現在の状態に依存している場合、セッター関数にコールバック関数を渡すことで、最新の状態を基にした更新が行えます。
```
setState(prevState => {
  return newState;
});
```


## State更新で重要なルール
### 状態の不変性の維持 
Reactでは、状態の不変性を維持することが推奨されます。
オブジェクトや配列などの複合型の場合、新しい状態を作成する際には、既存の状態を直接変更するのではなく、新しいオブジェクトや配列を作成して更新する必要があります。
```
setState(prevState => {
  return {...prevState, newProperty: newValue};
});
```
