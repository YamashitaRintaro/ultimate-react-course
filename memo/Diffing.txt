# Diffingとは
ReactのDiffingアルゴリズムは、アプリケーションのパフォーマンスを最適化し、ユーザーインターフェイスを効率的に更新するために欠かせないプロセスです。
このアルゴリズムは、コンポーネントの以前の状態と新しい状態を比較し、変更が必要な最小限のDOM操作を決定します。
ここでは、Diffingアルゴリズムがどのように機能するのか、そしてそのプロセスで考慮される主要な原則と状況について詳しく見ていきます。

## Diffingアルゴリズムの基本原則
Diffingの根底には2つの基本的な前提があります。

### 1. 異なるタイプの要素は異なる木を生み出す
Reactは、異なるタイプの2つの要素（例えば<div>と<header>）を比較した場合、それらが異なる木を生み出すと判断します。
これは、要素のタイプが変更されると、その要素とその子要素全体が新しい木として再構築されることを意味します。

### 2. 安定したキーは要素を一貫して保持する
キーは要素の一意性を保証するために使用されます。
安定したキー、つまり時間が経っても変わらないキーを持つ要素は、レンダリング間で同じ状態を維持します。


## Diffingにおける考慮事項
Diffingでは、特に2つの異なる状況を考慮する必要があります。

### 1. ツリーの同じ位置に異なる要素がある場合
2つのレンダリングで同じ位置に異なる要素が存在する場合（例えば<div>が<header>に置き換わる）、親要素のDOMが更新され、そのすべての子コンポーネントは再構築されます。
この過程で、子コンポーネントが保持していた状態は失われます。

```before
<div>
  <SearchBar />
</div>
```

```after
<header>
  <SearchBar />
</header>
```

### 2. ツリーの同じ位置に同じタイプの要素がある場合
要素のタイプが変わらないが属性が変更された場合（例えばclassNameが"hidden"から"active"に変更される）、ReactはDOM要素の再構築ではなく、必要な属性の更新だけを行います。
これにより、DOMの再レンダリングが最小限に抑えられ、パフォーマンスが向上します。

```before
<div className = "hidden">
  <SearchBar />
</div>
```

```after
<div className = "active">
  <SearchBar />
</div>
```

