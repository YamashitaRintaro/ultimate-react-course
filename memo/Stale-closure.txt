## Closureとは
Stale Closureについて説明する前に、Closureとは何でしょうか?
Closure（クロージャ）は、関数が定義された時点の周囲の状態（レキシカルスコープ）を「記憶」するJavaScriptの機能です。
簡単に言うと、「関数が作成された時点での変数や状態を保持し続ける機能」と言えます。
詳しくは以下をご覧ください。
https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures


## Stale Closureとは？
ReactでのStale Closureは、コンポーネントのレンダリング間に「古い」変数や状態を参照し続ける現象を指します。
つまり、stateやpropsが更新されコンポーネントが再レンダリングされた後も、useEffectのコールバック関数が更新前の値を「覚えている」状態です。

例として、検索されたユーザーIDに基づいてuseEffect内部でデータをフェッチするコンポーネントを考えます。
ユーザーIDが更新して検索をしても、期待される最新のデータではなく、古いデータがフェッチされてしまいます。
useEffectのコールバック関数では、関数が定義された時点でのユーザーIDを「記憶」しているためです。
```
function SearchBar({ label, onSearch }) {
    const [inputValue, setInputValue] = useState(1);

    return (
        <div className="mb-6">
            <label className="block mb-2 text-sm font-medium text-gray-700">
                {label}
            </label>
            <div className="flex">
                <input
                    type="number"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="ユーザーIDを入力..."
                    className="flex-grow p-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button
                    onClick={() => onSearch(inputValue)}
                    className="bg-blue-500 hover:bg-blue-700 text-white p-2 rounded-r-md"
                >
                    検索
                </button>
            </div>
        </div>
    );
}

function UserInfoCard({ title, userInfo, loading, error }) {
    return (
        <div className="bg-white p-4 border rounded-lg shadow-lg">
            <h2 className="text-lg font-bold mb-4">{title}</h2>
            {loading ? (
                <p>読み込み中...</p>
            ) : error ? (
                <p className="text-red-500">{error}</p>
            ) : userInfo ? (
                <div className="text-center">
                    <img
                        src={`https://robohash.org/${userInfo.id}?set=set5&size=180x180`}
                        alt="User Avatar"
                        className="mx-auto mb-4 rounded-full"
                    />
                    <h3 className="text-xl font-semibold">{userInfo.name}</h3>
                    <p>Email: {userInfo.email}</p>
                    <p>Phone: {userInfo.phone}</p>
                    <p>
                        Website:{" "}
                        <a
                            href={`http://${userInfo.website}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-500 hover:text-blue-700"
                        >
                            {userInfo.website}
                        </a>
                    </p>
                </div>
            ) : (
                <p>ユーザー情報を表示してください。</p>
            )}
        </div>
    );
}

function App() {
    const [inputId, setInputId] = useState(1);
    const [userInfo, setUserInfo] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState("");

    useEffect(() => {
        if (!inputId) return;
        setLoading(true);
        fetch(`https://jsonplaceholder.typicode.com/users/${inputId}`)
            .then((response) => response.json())
            .then((data) => {
                setUserInfo(data);
            })
            .catch((error) => {
                setError(error.toString());
            })
            .finally(() => {
                setLoading(false);
            });
    }, []);

    return (
        <div className="container mx-auto p-4 space-y-8">
            <div>
                <SearchBar
                    label="ユーザーIDを入力して検索："
                    onSearch={setInputId}
                />
                <UserInfoCard
                    userInfo={userInfo}
                    loading={loading}
                    error={error}
                />
            </div>
        </div>
    );
}
```

## 依存配列の必要性
依存配列に指定された値に変更があった場合、コールバック関数をスキップせずに再実行します。
この時、コールバック関数は最新のレキシカルスコープにアクセスし、そのスコープ内で最新のstateやpropsへの参照を取得します。
つまり、コールバック関数が「再実行」されるとき、最新のスコープ内の値を「記憶」する新しいクロージャとして再定義されるのです。
その結果、コールバック関数は常に最新のデータに基づいて操作を行うことができ、Stale Closureの問題を回避します。

```
useEffect(() => {
    if (!inputId) return;
    setLoading(true);
    fetch(`https://jsonplaceholder.typicode.com/users/${inputId}`)
        .then((response) => response.json())
        .then((data) => {
            setUserInfo(data);
        })
        .catch((error) => {
            setError(error.toString());
        })
        .finally(() => {
            setLoading(false);
        });
}, [inputId]);
```