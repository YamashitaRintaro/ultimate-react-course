# Reactのコンポーネントがスクリーンに表示される詳細な仕組み
## 1. レンダーのトリガー
### 1.1 状態変化によるレンダリング
コンポーネントの状態（state）が変化すると、そのコンポーネントが再レンダリングされる。これは、コンポーネントの状態に基づいて、画面に表示される内容が変化するため。
レンダーがトリガーされるシチュエーションは以下の2つ。
・初期レンダリング
・コンポーネントインスタンスのState更新

## 2. レンダーフェーズ
### 2.1 仮想DOMの作成
Reactは、コンポーネントツリーを仮想DOMと呼ばれる軽量なデータ構造に変換する。仮想DOMは、実際のDOMよりも高速で効率的に操作できる。
仮想DOMは、React Elementと呼ばれるオブジェクトで構成される。React Elementは、コンポーネント、DOM要素、テキストなど、画面に表示されるすべての要素を表す。

### 2.2 ファイバーツリーを更新
新しい仮想DOMに基づいてファイバー・ツリーを更新する。

### 2.3 リコンシリエーション
ファイバーはツリー全体を段階的にウォークスルーし、現在のファイバー・ツリーと、新しい仮想DOMに基づいて更新されたファイバー・ツリーの間で､ 何を変更する必要があるかを正確に分析する｡
このプロセスは「リコンシリエーション」と呼ばれる。
リコンシリエーションは、効率的なDOM更新を可能にする。Reactは、変更された要素のみを更新し、変更されていない要素はそのままにする。

## 3. コミットフェーズ
### 3.1 エフェクトの実行
リコンシリエーションの結果に基づいて、Reactは実際のDOMを更新します。これは「コミットフェーズ」と呼ばれる。
コミットフェーズでは、Reactは次の操作を実行する。

・新しいDOM要素を作成。
・既存のDOM要素を更新。
・不要なDOM要素を削除。

### 3.2 DOMの更新
エフェクト・リストを調べ、すでに存在するDOMツリーにあった実際のDOM要素にひとつずつ適用していく。
Reactは、パフォーマンスを向上させるために、エフェクトをバッチ処理します。これは、複数のエフェクトをまとめて実行することで、ブラウザの再描画回数を減らすことができる。
コミットフェーズが完了すると､作業中のファイバーツリーが次のレンダーサイクルのカレントツリーになる｡

## 4. 画面の再描画
ブラウザは、DOMが変更されたことに気づき、アイドル時間があればいつでも画面を再描画するようになる。

